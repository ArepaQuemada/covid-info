{"version":3,"sources":["hooks/useFetch.js","components/MainChart.js","components/StatCard.js","components/CardsContainer.js","components/MainDoughnut.js","utils/buildDataSet.js","App.js","hooks/useParseDate.js","index.js"],"names":["useFetch","url","useState","data","setData","useEffect","a","axios","get","fetchData","useStyles","makeStyles","theme","root","marginBottom","wrapper","border","palette","primary","dark","padding","breakpoints","down","MainChart","dataset","classes","Container","className","disableGutters","Box","StatCard","title","stats","color","backgroundColor","width","transition","transform","textAlign","Typography","variant","CardsContainer","slots","display","justifyContent","flexWrap","map","elem","main","MainDoughnut","maxWidth","disableGutter","buildDataSet","labels","datasets","label","borderColor","backdrop","zIndex","drawer","parseSlots","firstTitle","secondTitle","thirdTitle","firstStat","secondStat","thirdStat","secondary","success","extractTotals","TotalConfirmed","TotalDeaths","TotalRecovered","App","date","today","Date","dateFormat","concat","fromDate","getDate","setDate","parsefromDate","useParseDate","global","countryData","Countries","find","Country","newCountryData","NewConfirmed","NewDeaths","NewRecovered","extractNews","totalCountryData","totalGlobalData","Global","titles","dataSetMainChart","newDataCountrySlots","datasetMainDoughnutCountry","datasetMainDoughnutGlobal","Confirmed","alignItems","Backdrop","open","CircularProgress","createMuiTheme","light","alert","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.9a16639f.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default function useFetch(url) {\r\n    const [ data, setData ] = useState();\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const data = await axios.get(url);\r\n            setData(data.data);\r\n        }\r\n        fetchData();\r\n    }, [ url ]);\r\n    return data;\r\n}","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { makeStyles, Container, Box } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        marginBottom: '10px'\r\n    },\r\n    wrapper: {\r\n        border: `3px solid ${theme.palette.primary.dark}`,\r\n        padding: '20px',\r\n        [theme.breakpoints.down('md')]: {\r\n            padding: 0\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function MainChart({ dataset }) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container className={classes.root} disableGutters>\r\n            <Box className={classes.wrapper}>\r\n                <Line\r\n                    data={dataset}\r\n                />\r\n            </Box>\r\n        </Container>\r\n    );\r\n}","import React from 'react';\r\nimport { Box, Typography, makeStyles } from '@material-ui/core';\r\n\r\nexport default function StatCard({ title, stats, color }) {\r\n\r\n    const useStyles = makeStyles(theme => ({\r\n        root: {\r\n            backgroundColor: color,\r\n            padding: '10px',\r\n            width: '31%',\r\n            marginBottom: '10px',\r\n            transition: '.2s',\r\n            [theme.breakpoints.down('sm')]: {\r\n                width: '100%'\r\n            },\r\n            '&:hover': {\r\n                transform: 'rotateY(30deg)'\r\n            }\r\n        }\r\n    }));\r\n\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <Box className={classes.root} textAlign=\"center\">\r\n            <Typography variant=\"h4\">{stats}</Typography>\r\n            <Typography variant=\"h6\">{title}</Typography>\r\n        </Box>\r\n    );\r\n}","import React from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport StatCard from './StatCard';\r\n\r\nexport default function CardsContainer({ theme, slots }) {\r\n    if (slots) {\r\n        return (\r\n            <Box display=\"flex\" justifyContent=\"space-between\" width=\"100%\" flexWrap=\"wrap\">\r\n                {slots.map(elem => {\r\n                    return (\r\n                        <StatCard \r\n                            title={elem.title}\r\n                            stats={elem.stats}\r\n                            color={elem.backgroundColor}\r\n                            />\r\n                    )\r\n                })}\r\n            </Box>\r\n        );\r\n    }\r\n    return (\r\n        <>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { Container, makeStyles, Typography } from '@material-ui/core';\r\nimport { Doughnut } from 'react-chartjs-2'\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n    root: {\r\n        marginBottom: '10px',\r\n        padding: '10px',\r\n        border: `3px solid ${theme.palette.primary.main}`,\r\n        textAlign: \"center\"\r\n    }\r\n}));\r\n\r\nexport default function MainDoughnut({ dataset, title }) {\r\n    \r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container className={classes.root} maxWidth=\"sm\" disableGutter>\r\n            <Doughnut \r\n                data={dataset} />\r\n            <Typography variant=\"h5\">{title}</Typography>\r\n        </Container>\r\n    );\r\n}","export default function buildDataSet(labels, datasets) {\r\n\r\n    return {\r\n        labels,\r\n        datasets: datasets.map(elem => {\r\n            return {\r\n                label: elem.label,\r\n                data: [...elem.data],\r\n                backgroundColor: elem.backgroundColor,\r\n                borderColor: elem.borderColor\r\n            }\r\n        })\r\n    }\r\n}","import React from 'react';\r\nimport useFetch from './hooks/useFetch';\r\nimport useParseDate from './hooks/useParseDate';\r\nimport dateFormat from 'dateformat';\r\nimport { makeStyles, Container, Backdrop, CircularProgress, Box, Typography } from '@material-ui/core';\r\nimport MainChart from './components/MainChart';\r\nimport CardContainer from './components/CardsContainer';\r\nimport MainDoughnut from './components/MainDoughnut';\r\nimport buildDataSet from './utils/buildDataSet';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n   root: {\r\n      [theme.breakpoints.down('md')]: {\r\n         padding: '10px'\r\n      }\r\n   },\r\n   backdrop: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      color: theme.palette.primary.main,\r\n   },\r\n}));\r\n\r\nconst parseSlots = (firstTitle, secondTitle, thirdTitle, firstStat, secondStat, thirdStat, theme) => {\r\n   return [\r\n      {\r\n         title: firstTitle,\r\n         stats: firstStat,\r\n         backgroundColor: theme.palette.primary.main\r\n      },\r\n      {\r\n         title: secondTitle,\r\n         stats: secondStat,\r\n         backgroundColor: theme.palette.secondary.main\r\n      },\r\n      {\r\n         title: thirdTitle,\r\n         stats: thirdStat,\r\n         backgroundColor: theme.palette.success.main\r\n      }\r\n   ]\r\n}\r\n\r\nconst extractTotals = (data) => {\r\n   const { TotalConfirmed, TotalDeaths, TotalRecovered } = data || {};\r\n   return [ TotalConfirmed, TotalDeaths, TotalRecovered ];\r\n}\r\n\r\nconst extractNews = (data) => {\r\n   const { NewConfirmed, NewDeaths, NewRecovered } = data || {};\r\n   return [ NewConfirmed, NewDeaths, NewRecovered ];\r\n}\r\n\r\nexport default function App({ theme }) {\r\n   const classes = useStyles();\r\n   const { today, fromDate } = useParseDate();\r\n\r\n   const data = useFetch(`https://api.covid19api.com/country/argentina?from=${fromDate}&to=${today}`);\r\n   const global = useFetch('https://api.covid19api.com/summary');\r\n   \r\n   const countryData = ((global || {}).Countries || []).find(elem => elem.Country === 'Argentina') || {};\r\n   const newCountryData = extractNews(countryData);\r\n   const totalCountryData = extractTotals(countryData);\r\n   const totalGlobalData = extractTotals((global || {}).Global);\r\n   const titles = [ 'Confirmed', 'Deaths', 'Recovered' ];\r\n\r\n   let dataSetMainChart = {};\r\n   let newDataCountrySlots = [];\r\n   let datasetMainDoughnutCountry = {};\r\n   let datasetMainDoughnutGlobal = {};\r\n\r\n   if (data) {\r\n      const labels = data.map(elem => dateFormat(elem.Date, \"d, mmm\"));\r\n      const datasets = [\r\n         {\r\n            label: 'Confirmed',\r\n            data: data.map(elem => elem.Confirmed),\r\n            backgroundColor: 'rgb(255,255,255,0.1)',\r\n            borderColor: theme.palette.secondary.main,\r\n         },\r\n      ]\r\n      dataSetMainChart = buildDataSet(labels, datasets);\r\n   }\r\n\r\n   if (global) {\r\n      newDataCountrySlots = parseSlots('New Confirmed', 'New Deaths', 'New Recovered', ...newCountryData, theme);\r\n      const labelsCountry = [...titles];\r\n      const datasetsCountry = [\r\n         {\r\n            data: [...totalCountryData],\r\n            backgroundColor: [theme.palette.primary.main, theme.palette.secondary.main, theme.palette.success.main],\r\n         },\r\n      ]\r\n      datasetMainDoughnutCountry = buildDataSet(labelsCountry, datasetsCountry);\r\n\r\n      const labelsGlobal = [...titles];\r\n      const datasetsGlobal = [ \r\n         {\r\n            data: [...totalGlobalData],\r\n            backgroundColor: [theme.palette.primary.main, theme.palette.secondary.main, theme.palette.success.main]\r\n         }   \r\n      ]\r\n      datasetMainDoughnutGlobal = buildDataSet(labelsGlobal, datasetsGlobal);\r\n   }\r\n\r\n   if (!(data || global)) {\r\n      return (\r\n         <Backdrop className={classes.backdrop} open={!(data || global)}>\r\n            <CircularProgress></CircularProgress>\r\n         </Backdrop>\r\n      );\r\n   }\r\n\r\n   return (\r\n      <Container className={classes.root}>\r\n         <Typography variant=\"h4\"> Covid Info Charts</Typography>\r\n         <MainChart\r\n            dataset={dataSetMainChart}\r\n         />\r\n         <CardContainer\r\n            theme={theme}\r\n            slots={newDataCountrySlots}\r\n         />\r\n         <Box width=\"100%\" display=\"flex\" flexWrap=\"wrap\" alignItems=\"space-between\">\r\n            <MainDoughnut\r\n               color={theme.palette.primary.dark}\r\n               dataset={datasetMainDoughnutCountry}\r\n               title=\"Total by country\"\r\n            />\r\n            <MainDoughnut\r\n               color={theme.palette.primary.dark}\r\n               dataset={datasetMainDoughnutGlobal}\r\n               title=\"Total globally\"\r\n            />\r\n         </Box>\r\n      </Container>\r\n   );\r\n}\r\n","import dateFormat from 'dateformat';\r\n\r\nexport default function useParseDate() {\r\n\r\n    const parseToday = (date) => dateFormat(date, \"yyyy-mm-dd\").concat('T00:00:00Z');\r\n\r\n    const parsefromDate = (date) => {\r\n        const fromDate = date.getDate() -31;\r\n        return dateFormat(new Date(date.setDate(fromDate)), \"yyyy-mm-dd\").concat('T00:00:00Z');\r\n    }\r\n\r\n    return {\r\n        today: parseToday(new Date()),\r\n        fromDate: parsefromDate(new Date())\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#80d8ff',\r\n      dark: '#49a7cc',\r\n      light: '#b5ffff'\r\n    },\r\n    secondary: {\r\n      main: '#ff1744',\r\n      dark: '#c4001d',\r\n      light: '#ff616f'\r\n    },\r\n    alert: {\r\n      main: '#FEEA3B'\r\n    }\r\n  }\r\n})\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <App theme={theme}/>\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}