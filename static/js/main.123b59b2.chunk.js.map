{"version":3,"sources":["components/Form.js","components/MainChart.js","components/StatCard.js","components/CardsContainer.js","components/MainDoughnut.js","components/ChartsContainer.js","utils/buildDataSet.js","components/ChartsBuild.js","hooks/useFetch.js","components/ChartsApi.js","utils/parseDate.js","App.js","index.js"],"names":["useStyles","makeStyles","root","textAlign","Form","setCountryName","classes","inputRef","useRef","Container","className","disableGutters","Typography","variant","Box","height","display","flexDirection","justifyContent","onSubmit","e","preventDefault","defaultValue","current","firstChild","control","mb","Autocomplete","options","countries","getOptionLabel","option","name","fullWidth","renderInput","params","TextField","label","placeholder","color","ref","Button","type","size","theme","marginBottom","wrapper","border","palette","primary","dark","padding","breakpoints","down","MainChart","dataset","data","StatCard","title","stats","backgroundColor","width","transition","transform","CardsContainer","slots","flexWrap","map","elem","main","up","maxWidth","MainDoughnut","backdrop","zIndex","drawer","ChartsContainer","dataSetMainChart","dataSetsDoughnut","newDataCountrySlots","mainChartRef","datasetMainDoughnutCountry","datasetMainDoughnutGlobal","id","alignItems","buildDataSet","labels","datasets","borderColor","parseSlots","firstTitle","secondTitle","thirdTitle","firstStat","secondStat","thirdStat","secondary","success","extractTotals","TotalConfirmed","TotalDeaths","TotalRecovered","buildDataSetGlobal","countryName","countryData","Countries","find","Country","search","newCountryData","NewConfirmed","NewDeaths","NewRecovered","extractNews","Global","totalCountryData","totalGlobalData","getTotals","titles","labelsCountry","datasetsCountry","labelsGlobal","datasetsGlobal","ChartsBuild","monthly","global","chartsRef","console","log","dateFormat","Date","Confirmed","buildDataSetMonthly","useFetch","url","setLoading","useState","setData","useEffect","a","axios","get","undefined","fetchData","ChartsApi","date","today","concat","fromDate","getDate","setDate","parsefromDate","parseDate","loading","Backdrop","open","CircularProgress","App","createMuiTheme","light","alert","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.123b59b2.chunk.js","sourcesContent":["import React, { useRef } from 'react';\r\nimport countries from '../utils/countries.json';\r\nimport { TextField, Container, Box, Typography, Button, makeStyles } from '@material-ui/core';\r\nimport { Autocomplete } from '@material-ui/lab'\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        textAlign: \"center\"\r\n    }\r\n});\r\n\r\nexport default function Form({ setCountryName }) {\r\n    const classes = useStyles();\r\n    const inputRef = useRef(null);\r\n\r\n    const handleClick = (e) => {\r\n        e.preventDefault();\r\n        const { current: { firstChild: { control: { defaultValue } } } } = inputRef;\r\n        setCountryName(defaultValue);\r\n    }\r\n\r\n    return (\r\n        <Container className={classes.root} disableGutters>\r\n            <Typography variant=\"h4\">COVID INFO CHARTS</Typography>\r\n            <Box height=\"80%\" display=\"flex\" flexDirection=\"column\" justifyContent=\"center\">\r\n                <form onSubmit={handleClick}>\r\n                    <Box mb={2}>\r\n                        <Autocomplete\r\n                            options={countries}\r\n                            getOptionLabel={(option) => option.name}\r\n                            fullWidth\r\n                            renderInput={(params) =>\r\n                                <TextField\r\n                                    {...params}\r\n                                    label=\"Country name\"\r\n                                    placeholder=\"Type a country name\"\r\n                                    variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    ref={inputRef}\r\n                                />}\r\n                        />\r\n                    </Box>\r\n                    <Box mb={1}>\r\n                        <Button type=\"submit\" color=\"primary\" variant=\"contained\" fullWidth size=\"large\">SEARCH</Button>\r\n                    </Box>\r\n                </form>\r\n            </Box>\r\n        </Container>\r\n    )\r\n}","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { makeStyles, Container, Box } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        marginBottom: '10px'\r\n    },\r\n    wrapper: {\r\n        border: `3px solid ${theme.palette.primary.dark}`,\r\n        padding: '20px',\r\n        [theme.breakpoints.down('md')]: {\r\n            padding: 0\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function MainChart({ dataset }) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container className={classes.root} disableGutters>\r\n            <Box className={classes.wrapper}>\r\n                <Line\r\n                    data={dataset}\r\n                />\r\n            </Box>\r\n        </Container>\r\n    );\r\n}","import React from 'react';\r\nimport { Box, Typography, makeStyles } from '@material-ui/core';\r\n\r\nexport default function StatCard({ title, stats, color }) {\r\n\r\n    const useStyles = makeStyles(theme => ({\r\n        root: {\r\n            backgroundColor: color,\r\n            padding: '10px',\r\n            width: '31%',\r\n            marginBottom: '10px',\r\n            transition: '.2s',\r\n            [theme.breakpoints.down('sm')]: {\r\n                width: '100%'\r\n            },\r\n            '&:hover': {\r\n                transform: 'rotateY(30deg)'\r\n            }\r\n        }\r\n    }));\r\n\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <Box className={classes.root} textAlign=\"center\">\r\n            <Typography variant=\"h4\">{stats}</Typography>\r\n            <Typography variant=\"h6\">{title}</Typography>\r\n        </Box>\r\n    );\r\n}","import React from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport StatCard from './StatCard';\r\n\r\nexport default function CardsContainer({ theme, slots }) {\r\n    if (slots) {\r\n        return (\r\n            <Box display=\"flex\" justifyContent=\"space-between\" width=\"100%\" flexWrap=\"wrap\">\r\n                {slots.map(elem => {\r\n                    return (\r\n                        <StatCard \r\n                            title={elem.title}\r\n                            stats={elem.stats}\r\n                            color={elem.backgroundColor}\r\n                            />\r\n                    )\r\n                })}\r\n            </Box>\r\n        );\r\n    }\r\n    return (\r\n        <>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { Container, makeStyles, Typography } from '@material-ui/core';\r\nimport { Doughnut } from 'react-chartjs-2'\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n    root: {\r\n        marginBottom: '10px',\r\n        border: `3px solid ${theme.palette.primary.main}`,\r\n        textAlign: \"center\",\r\n        [theme.breakpoints.up('md')]: {\r\n            maxWidth: '49%'\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function MainDoughnut({ dataset, title }) {\r\n    \r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container className={classes.root} maxWidth=\"sm\" disableGutters>\r\n            <Doughnut \r\n                data={dataset} />\r\n            <Typography variant=\"h5\">{title}</Typography>\r\n        </Container>\r\n    );\r\n}","import React, { useRef } from 'react';\r\nimport { makeStyles, Container, Box, Typography } from '@material-ui/core';\r\nimport MainChart from './MainChart';\r\nimport CardContainer from './CardsContainer';\r\nimport MainDoughnut from './MainDoughnut';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        [theme.breakpoints.down('md')]: {\r\n            padding: '10px'\r\n        }\r\n    },\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: theme.palette.primary.main,\r\n    },\r\n}));\r\n\r\nexport default function ChartsContainer({ theme, dataSetMainChart, dataSetsDoughnut, newDataCountrySlots }) {\r\n    const classes = useStyles();\r\n    const mainChartRef = useRef(null);\r\n    const { datasetMainDoughnutCountry, datasetMainDoughnutGlobal } = dataSetsDoughnut;\r\n    \r\n    return (\r\n        <Container className={classes.root}>\r\n            <div ref={mainChartRef}>\r\n                <MainChart\r\n                    dataset={dataSetMainChart}\r\n                    id=\"main-chart\"\r\n                />\r\n            </div>\r\n            <CardContainer\r\n                theme={theme}\r\n                slots={newDataCountrySlots}\r\n            />\r\n            <Box width=\"100%\" display=\"flex\" flexWrap=\"wrap\" alignItems=\"space-evenly\">\r\n                <MainDoughnut\r\n                    color={theme.palette.primary.dark}\r\n                    dataset={datasetMainDoughnutCountry}\r\n                    title=\"Total by country\"\r\n                />\r\n                <MainDoughnut\r\n                    color={theme.palette.primary.dark}\r\n                    dataset={datasetMainDoughnutGlobal}\r\n                    title=\"Total globally\"\r\n                />\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n","export default function buildDataSet(labels, datasets) {\r\n\r\n    return {\r\n        labels,\r\n        datasets: datasets.map(elem => {\r\n            return {\r\n                label: elem.label,\r\n                data: [...elem.data],\r\n                backgroundColor: elem.backgroundColor,\r\n                borderColor: elem.borderColor\r\n            }\r\n        })\r\n    }\r\n}","import React, { useRef } from 'react';\r\nimport ChartsContainer from './ChartsContainer';\r\nimport buildDataSet from '../utils/buildDataSet';\r\nimport dateFormat from 'dateformat';\r\n\r\nconst parseSlots = (firstTitle, secondTitle, thirdTitle, firstStat, secondStat, thirdStat, theme) => {\r\n    return [\r\n        {\r\n            title: firstTitle,\r\n            stats: firstStat,\r\n            backgroundColor: theme.palette.primary.main\r\n        },\r\n        {\r\n            title: secondTitle,\r\n            stats: secondStat,\r\n            backgroundColor: theme.palette.secondary.main\r\n        },\r\n        {\r\n            title: thirdTitle,\r\n            stats: thirdStat,\r\n            backgroundColor: theme.palette.success.main\r\n        }\r\n    ]\r\n}\r\n\r\nconst extractTotals = (data) => {\r\n    const { TotalConfirmed, TotalDeaths, TotalRecovered } = data || {};\r\n    return [TotalConfirmed, TotalDeaths, TotalRecovered];\r\n}\r\n\r\nconst extractNews = (data) => {\r\n    const { NewConfirmed, NewDeaths, NewRecovered } = data || {};\r\n    return [NewConfirmed, NewDeaths, NewRecovered];\r\n}\r\n\r\nconst buildDataSetMonthly = (data, theme) => {\r\n\r\n    const labels = data.map(elem => dateFormat(elem.Date, \"d, mmm\"));\r\n    const datasets = [\r\n        {\r\n            label: 'Confirmed',\r\n            data: data.map(elem => elem.Confirmed),\r\n            backgroundColor: 'rgb(255,255,255,0.1)',\r\n            borderColor: theme.palette.secondary.main,\r\n        },\r\n    ]\r\n    return buildDataSet(labels, datasets);\r\n}\r\n\r\n\r\nconst getTotals = (countryData, data) => {\r\n    const { Global } = data;\r\n    return {\r\n        totalCountryData: extractTotals(countryData),\r\n        totalGlobalData: extractTotals(Global)\r\n    }\r\n}\r\n\r\nconst buildDataSetGlobal = (data, theme, countryName) => {\r\n    const countryData = ((data || {}).Countries || []).find(elem => elem.Country.search(countryName)) || {};\r\n    const newCountryData = extractNews(countryData);\r\n    const { totalCountryData, totalGlobalData } = getTotals(countryData, data);\r\n    const titles = ['Confirmed', 'Deaths', 'Recovered'];\r\n    const newDataCountrySlots = parseSlots('New Confirmed', 'New Deaths', 'New Recovered', ...newCountryData, theme);\r\n\r\n    const labelsCountry = [...titles];\r\n    const datasetsCountry = [\r\n        {\r\n            data: [...totalCountryData],\r\n            backgroundColor: [theme.palette.primary.main, theme.palette.secondary.main, theme.palette.success.main],\r\n        },\r\n    ]\r\n\r\n    const labelsGlobal = [...titles];\r\n    const datasetsGlobal = [\r\n        {\r\n            data: [...totalGlobalData],\r\n            backgroundColor: [theme.palette.primary.main, theme.palette.secondary.main, theme.palette.success.main]\r\n        }\r\n    ]\r\n    return {\r\n        datasetMainDoughnutCountry: buildDataSet(labelsCountry, datasetsCountry),\r\n        datasetMainDoughnutGlobal: buildDataSet(labelsGlobal, datasetsGlobal),\r\n        newDataCountrySlots\r\n    }\r\n}\r\n\r\nexport default function ChartsBuild({ theme, data, countryName }) {\r\n    const { monthly, global } = data;\r\n    const chartsRef = useRef();\r\n    console.log(global);\r\n\r\n    if (monthly && global) {\r\n        const dataSetMainChart = buildDataSetMonthly(monthly, theme);\r\n        const dataSetsDoughnut = buildDataSetGlobal(global, theme, countryName);\r\n        const { newDataCountrySlots } = dataSetsDoughnut;\r\n        \r\n        return (\r\n            <div ref={chartsRef}>\r\n                <ChartsContainer\r\n                    dataSetMainChart={dataSetMainChart}\r\n                    dataSetsDoughnut={dataSetsDoughnut}\r\n                    newDataCountrySlots={newDataCountrySlots}\r\n                    theme={theme}\r\n                    chartsRef={chartsRef.current}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <>\r\n        </>\r\n    );\r\n}","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default function useFetch(url, setLoading) {\r\n    const [ data, setData ] = useState();\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                setLoading(true)\r\n                const data = await axios.get(url);\r\n                setData(data.data);\r\n            } catch (err) {\r\n                console.log(err);\r\n                setData(undefined);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n        fetchData();\r\n    }, [ url, setLoading ]);\r\n    return data;\r\n}","import React, { useState } from 'react';\r\nimport ChartsBuild from './ChartsBuild';\r\nimport useFetch from '../hooks/useFetch';\r\nimport parseDate from '../utils/parseDate';\r\nimport { Backdrop, CircularProgress, makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    backdrop: {\r\n       zIndex: theme.zIndex.drawer + 1,\r\n       color: theme.palette.primary.main,\r\n    },\r\n }));\r\n\r\n \r\nexport default function ChartsApi ({ theme, countryName }) {\r\n    const classes = useStyles();\r\n    const { today, fromDate } = parseDate();\r\n    const [ loading, setLoading ] = useState();\r\n    const data = {\r\n        monthly: useFetch(`https://api.covid19api.com/country/${countryName}?from=${fromDate}&to=${today}`, setLoading),\r\n        global: useFetch('https://api.covid19api.com/summary', setLoading),\r\n    }\r\n\r\n    if (loading) {\r\n        return (\r\n           <Backdrop className={classes.backdrop} open={loading}>\r\n              <CircularProgress></CircularProgress>\r\n           </Backdrop>\r\n        );\r\n     }\r\n     return (\r\n        <ChartsBuild \r\n            theme={theme}\r\n            data={data}\r\n            countryName={countryName}\r\n            />\r\n     )\r\n}","import dateFormat from 'dateformat';\r\n\r\nexport default function useParseDate() {\r\n\r\n    const parseToday = (date) => dateFormat(date, \"yyyy-mm-dd\").concat('T00:00:00Z');\r\n\r\n    const parsefromDate = (date) => {\r\n        const fromDate = date.getDate() -31;\r\n        return dateFormat(new Date(date.setDate(fromDate)), \"yyyy-mm-dd\").concat('T00:00:00Z');\r\n    }\r\n\r\n    return {\r\n        today: parseToday(new Date()),\r\n        fromDate: parsefromDate(new Date())\r\n    }\r\n}","import React, { useState, useRef } from 'react';\r\nimport { Container } from '@material-ui/core';\r\nimport Form from './components/Form';\r\nimport ChartsApi from './components/ChartsApi';\r\n\r\nexport default function App({ theme }) {\r\n   const [ countryName, setCountryName ] = useState();\r\n   const mainChartRef = useRef(null);\r\n\r\n   return (\r\n      <Container>\r\n         <Form\r\n            mainChartRef={mainChartRef}\r\n            setCountryName={setCountryName}\r\n           />\r\n           { countryName ? \r\n            <ChartsApi \r\n               theme={theme}\r\n               countryName={countryName}\r\n               /> : <> </>}\r\n      </Container>\r\n   );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#80d8ff',\r\n      dark: '#49a7cc',\r\n      light: '#b5ffff'\r\n    },\r\n    secondary: {\r\n      main: '#ff1744',\r\n      dark: '#c4001d',\r\n      light: '#ff616f'\r\n    },\r\n    alert: {\r\n      main: '#FEEA3B'\r\n    }\r\n  }\r\n})\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <App theme={theme}/>\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}